#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыЗаписиПриПроверкеПервогоАдминистратора;

#КонецОбласти

//#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
//	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
//		Возврат;
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.РазделениеВключено() Тогда
//		
//		ДоступноИзменениеПользователей = Истина;
//		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
//			МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
//			ДоступноИзменениеПользователей = МодульПользователиСлужебныйВМоделиСервиса.ДоступноИзменениеПользователей();
//		КонецЕсли;
//		
//		Если НЕ ДоступноИзменениеПользователей Тогда
//			Если Объект.Ссылка.Пустая() Тогда
//				ВызватьИсключение
//					НСтр("ru = 'В демонстрационном режиме не поддерживается
//					           |создание новых пользователей.'");
//			КонецЕсли;
//			ТолькоПросмотр = Истина;
//		КонецЕсли;
//		
//		Элементы.ПользовательИБАутентификацияOpenID.Видимость      = Ложь;
//		Элементы.ПользовательИБАутентификацияСтандартная.Видимость = Ложь;
//		Элементы.ПотребоватьСменуПароляПриВходе.Видимость = Ложь;
//		Элементы.ПользовательИБЗапрещеноИзменятьПароль.Видимость = Ложь;
//		Элементы.СвойстваАутентификацииОС.Видимость  = Ложь;
//		Элементы.ПользовательИБРежимЗапуска.Видимость = Ложь;
//	КонецЕсли;
//	
//	Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
//		Элементы.СвойстваАутентификацииОС.ТолькоПросмотр = Истина;
//	КонецЕсли;
//	
//	// Заполнение вспомогательных данных.
//	
	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИБРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИБРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(
				МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(Объект);
	
	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента.
		//Если Параметры.ГруппаНовогоПользователя <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
		//	ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		//КонецЕсли;
		//
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента.
			ЗначениеКопирования = Параметры.ЗначениеКопирования;
			Объект.Наименование = "";
			
			//Если Не Пользователи.УровеньДоступаПользователяВыше(ЗначениеКопирования, УровеньДоступа) Тогда
				ПрочитатьПользователяИБ(ЗначениеЗаполнено(ЗначениеКопирования.ИдентификаторПользователяИБ));
			//Иначе
			//	ПрочитатьПользователяИБ();
			//КонецЕсли;
			
			Если Не УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен = Ложь;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
			КонецЕсли;
		Иначе
			// Добавление элемента.
			
			// Чтение начальных значений свойств пользователя ИБ.
			ПрочитатьПользователяИБ();
			
			Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
				ПользовательИБАутентификацияСтандартная = Истина;
				
				//Если ОбщегоНазначения.РазделениеВключено() Тогда
				//	ПользовательИБПоказыватьВСпискеВыбора = Ложь;
				//	ПользовательИБАутентификацияOpenID = Истина;
				//КонецЕсли;
				
				//Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
					ВходВПрограммуРазрешен = Истина;
					ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
//	
//	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", ПользовательИБСуществует);
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();
//	ТребуетсяСинхронизацияССервисом = Объект.Ссылка.Пустая();
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
//		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
//		МодульУправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "КонтактнаяИнформация");
//		ПереопределитьРедактированиеКонтактнойИнформацииВСервисе();
//	КонецЕсли;
//	
	ОбщаяНастройкаФормы(Объект, Истина);
//	
//	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
//		Элементы.ГруппаШапка.ТолькоПросмотр = Истина;
//		Элементы.КонтактнаяИнформация.ТолькоПросмотр = Истина;
//		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр = Истина;
//		Элементы.СтраницаКомментарий.ТолькоПросмотр = Истина;
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация")
//		И ДействияСПользователемСервиса <> Неопределено Тогда
//			МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
//			МодульУправлениеКонтактнойИнформацией.УстановитьДоступностьЭлементовКонтактнойИнформации(ЭтотОбъект,
//				ОпределитьДоступностьЭлементовКонтактнойИнформации());
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		ДополнительныеПараметры = Новый Структура;
//		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
//		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
//		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
//		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
//	КонецЕсли;
//	
//	ПодготовитьНеобязательныйРеквизит("ФизическоеЛицо");
//	ПодготовитьНеобязательныйРеквизит("Подразделение");
//	
//	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
	
	Если Не ПользователиСлужебный.Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПотребоватьСменуПароляПриВходе.РасширеннаяПодсказка.Заголовок =
		ПользователиСлужебный.ПодсказкаПотребоватьСменуПароляПриВходе(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	Элементы.ПользовательИБПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли
	
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
	//	МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
//	
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
//		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
//			ОбновитьЭлементыДополнительныхРеквизитов();
//			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если ВРег(ИмяСобытия) = ВРег("Запись_НаборКонстант")
//	   И ВРег(Источник) = ВРег("ИспользоватьВнешнихПользователей") Тогда
//		
//		ПодключитьОбработчикОжидания("ПриИзмененияИспользованияВнешнихПользователей", 0.1, Истина);
//	КонецЕсли;
//	
//КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
//		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
//		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
//		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, "КонтактнаяИнформация");
//	КонецЕсли;
	
	ОбщаяНастройкаФормы(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	ЗаголовокВопросов = НСтр("ru = 'Запись пользователя информационной базы'");
	
	// Копирование прав пользователя.
	//Если ЗначениеЗаполнено(ЗначениеКопирования)
	//   И Не ЗначениеЗаполнено(Объект.Ссылка)
	//   И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом")
	//   И (Не ПараметрыЗаписи.Свойство("НеКопироватьПраваПользователя")
	//      И Не ПараметрыЗаписи.Свойство("КопироватьПраваПользователя")) Тогда
	//	
	//	Отказ = Истина;
	//	ПоказатьВопрос(
	//		Новый ОписаниеОповещения("ПослеОтветаНаВопросОКопированииПрав", ЭтотОбъект, ПараметрыЗаписи),
	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Скопировать также права пользователя ""%1""?'"), Строка(ЗначениеКопирования)),
	//		РежимДиалогаВопрос.ДаНет,
	//		,
	//		,
	//		ЗаголовокВопросов);
	//	Возврат;
	//КонецЕсли;
	
	Если ВходВПрограммуРазрешен Тогда
		
		Если ДействияВФорме.Роли = "Редактирование"
		   И ПользовательИБРоли.Количество() = 0 Тогда
			
			Если НЕ ПараметрыЗаписи.Свойство("СПустымСпискомРолей") Тогда
				Отказ = Истина;
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей", ЭтотОбъект, ПараметрыЗаписи),
					НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'"),
					РежимДиалогаВопрос.ДаНет,
					,
					,
					ЗаголовокВопросов);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Обработка записи первого администратора.
		Если НЕ ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			Отказ = Истина;
			ПараметрыЗаписиПриПроверкеПервогоАдминистратора = ПараметрыЗаписи;
			ПодключитьОбработчикОжидания("ПроверитьПервогоАдминистратора", 0.1, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().РазделениеВключено
	//	И ТребуетсяСинхронизацияССервисом
	//	И ПарольПользователяСервиса = Неопределено Тогда
	//	
	//	Отказ = Истина;
	//	ПользователиСлужебныйКлиент.ЗапроситьПарольДляАутентификацииВСервисе(
	//		Новый ОписаниеОповещения("ПослеЗапросаПароляДляАутентификацииВСервисеПередЗаписью", ЭтотОбъект, ПараметрыЗаписи),
	//		ЭтотОбъект,
	//		ПарольПользователяСервиса);
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗначениеКопирования", ЗначениеКопирования);
	
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
	//ТекущийОбъект.ДополнительныеСвойства.Вставить("СинхронизироватьССервисом", ТребуетсяСинхронизацияССервисом);
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", Объект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		Если ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
				НСтр("ru = 'Первый пользователь информационной базы назначается администратором.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		//ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ПолучитьЗначенияРеквизитовСправочника(
		//	ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
		ТекущийОбъект.Наименование = ТекущийОбъект.Ссылка.Наименование;
		ТекущийОбъект.ПометкаУдаления = ТекущийОбъект.Ссылка.ПометкаУдаления;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
	//	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	//	МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//КонецЕсли;
	
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
	//	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	//	Если НЕ Отказ И ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
	//		МодульУправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ЗаписатьСведенияОПользователе(ЭтотОбъект, ТекущийОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	//Если ПараметрыЗаписи.Свойство("КопироватьПраваПользователя") Тогда
	//	Источник = ЗначениеКопирования;
	//	Приемник = ТекущийОбъект.Ссылка;
	//	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	//	МодульУправлениеДоступомСлужебный.ПриКопированииПравНовомуПользователю(Источник, Приемник);
	//	ПользователиСлужебный.СкопироватьГруппыПользователя(Источник, Приемник);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТребуетсяСинхронизацияССервисом = Ложь;
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить(
			ТекущийОбъект.ДополнительныеСвойства.ОписаниеПользователяИБ.РезультатДействия);
	КонецЕсли;
	
	ОбщаяНастройкаФормы(ТекущийОбъект, , ПараметрыЗаписи);
	
	//ОбновитьСпособИзмененияEMailВСервисе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
//	Оповестить("Запись_Пользователи", Новый Структура, Объект.Ссылка);
//	
//	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
//		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтотОбъект);
//		
//	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
//		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтотОбъект);
//		
//	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
//		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтотОбъект);
//		
//	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищеноСопоставлениеСНесуществующимПользователемИБ") Тогда
//		Оповестить(
//			"ОчищеноСопоставлениеСНесуществующимПользователемИБ",
//			ПараметрыЗаписи.ОчищеноСопоставлениеСНесуществующимПользователемИБ,
//			ЭтотОбъект);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
//		ОповеститьОбИзменении(ГруппаНовогоПользователя);
//		Оповестить("Запись_ГруппыПользователей", Новый Структура, ГруппаНовогоПользователя);
//		ГруппаНовогоПользователя = Неопределено;
//	КонецЕсли;
//	
	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("ИдентификаторПользователяИБ", Объект.ИдентификаторПользователяИБ);
		Пользователи.ПроверитьОписаниеПользователяИБ(ОписаниеПользователяИБ, Отказ);
	КонецЕсли;
//	
//	Если ВходВПрограммуРазрешен
//	   И ЗначениеЗаполнено(СрокДействия)
//	   И СрокДействия <= НачалоДня(ТекущаяДатаСеанса()) Тогда
//		
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//			НСтр("ru = 'Ограничение должно быть до завтра или более.'"),, "ВходВПрограммуРазрешен",, Отказ);
//	КонецЕсли;
//	
//	// Проверка наличия ролей в метаданных.
//	Если Не Элементы.Роли.ТолькоПросмотр Тогда
//		Ошибки = Неопределено;
//		ЭлементыДерева = Роли.ПолучитьЭлементы();
//		Для Каждого Строка Из ЭлементыДерева Цикл
//			Если Не Строка.Пометка Тогда
//				Продолжить;
//			КонецЕсли;
//			Если Строка.ЭтоНесуществующаяРоль Тогда
//				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
//					"Роли[%1].РолиСиноним",
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" не найдена в метаданных.'"), Строка.Синоним),
//					"Роли",
//					ЭлементыДерева.Индекс(Строка),
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" в строке %%1 не найдена в метаданных.'"), Строка.Синоним));
//			КонецЕсли;
//			Если Строка.ЭтоНедоступнаяРоль Тогда
//				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
//					"Роли[%1].РолиСиноним",
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" недоступна для пользователей.'"), Строка.Синоним),
//					"Роли",
//					ЭлементыДерева.Индекс(Строка),
//					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Роль ""%1"" в строке %%1 недоступна для пользователей.'"), Строка.Синоним));
//			КонецЕсли;
//		КонецЦикла;
//		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
//		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
//	КонецЕсли;
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
//		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
//		МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
//		Если ОбщегоНазначения.РазделениеВключено() Тогда
//			ПроверитьЗаполнениеEmail(Отказ);
//		КонецЕсли;
//	КонецЕсли;
	
КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнитьИзПользователяИБ(Команда)
	
	ЗаполнитьПоляПоПользователюИБНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьИмяДляВхода(ЭтотОбъект, Истина);
	
	//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

//&НаКлиенте
//Процедура НедействителенПриИзменении(Элемент)
//	
//	Если Объект.Недействителен Тогда
//		ВходВПрограммуРазрешен = Ложь;
//	Иначе
//		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения
//			И (ПользовательИБАутентификацияOpenID
//			   Или ПользовательИБАутентификацияСтандартная
//			   Или ПользовательИБАутентификацияОС);
//	КонецЕсли;
//	
//	УстановитьДоступностьСвойств(ЭтотОбъект);
//	
//	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	
	Если Объект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Чтобы разрешить вход в программу, требуется снять
			           |пометку на удаление с этого пользователя.'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьИмяДляВхода(ЭтотОбъект);
	
	Если ВходВПрограммуРазрешен
	   И НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная
	   И НЕ ПользовательИБАутентификацияОС Тогда
	
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход
	   И Не ВходВПрограммуРазрешен Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'После записи вход в программу сможет разрешить только администратор.'"));
	КонецЕсли;
	
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБИмяПриИзменении(Элемент)
	
	ПользовательИБИмя = СокрЛП(ПользовательИБИмя);
	ПользовательИБИмяЗначениеПрямогоИзменения = ПользовательИБИмя;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПоказыватьВСпискеВыбораПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияОСПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЯзыкПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Поддержка контактной информации.

//&НаКлиенте
//Процедура Подключаемый_EMailПриИзменении(Элемент)
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//		
//	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
//	
//	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
//	
//	Если НЕ Объект.Ссылка.Пустая() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
//	
//	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Новый Структура("Вид",
//		ВидКонтактнойИнформацииEmailПользователя()))[0];
//	
//	Если ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]) Тогда
//		ПользовательИБПароль = "" + Новый УникальныйИдентификатор + "qQ";
//		УстановитьНаличиеПароля(ЭтотОбъект, Истина);
//	КонецЕсли;
//	
//	УстановитьДоступностьСвойств(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_EMailОчистка(Элемент, СтандартнаяОбработка)
//	
//	Если Не Элемент.РедактированиеТекста Тогда
//		СтандартнаяОбработка = Ложь;
//		Возврат;
//	КонецЕсли;
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	
//	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ТелефонПриИзменении(Элемент)
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	
//	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
//	
//	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_EMailНачалоВыбора(Элемент)
//	
//	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ПарольПользователяСервиса = Неопределено Тогда
//		ПользователиСлужебныйКлиент.ЗапроситьПарольДляАутентификацииВСервисе(
//			Новый ОписаниеОповещения("Подключаемый_EMailНачалоВыбораЗавершение", ЭтотОбъект),
//			ЭтотОбъект,
//			ПарольПользователяСервиса);
//	Иначе
//		Подключаемый_EMailНачалоВыбораЗавершение(Null, Неопределено);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_EMailНачалоВыбораЗавершение(НовыйПарольПользователяСервиса, Контекст) Экспорт
//	
//	Если НовыйПарольПользователяСервиса = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если НовыйПарольПользователяСервиса <> Null Тогда
//		ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
//	КонецЕсли;
//	
//	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
//	
//	Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииEmailПользователя());
//	
//	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Отбор)[0];
//	
//	ПараметрыФормы = Новый Структура;
//	ПараметрыФормы.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
//	ПараметрыФормы.Вставить("СтараяПочта",  ЭтотОбъект[СтрокаEMail.ИмяРеквизита]);
//	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
//	
//	Попытка
//		ОткрытьФорму("Справочник.Пользователи.Форма.СменаПочты", ПараметрыФормы, ЭтотОбъект,,,,
//			Новый ОписаниеОповещения("ПослеСменыПочты", ЭтотОбъект));
//	Исключение
//		ПарольПользователяСервиса = Неопределено;
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
//	
//	МодульУправлениеКонтактнойИнформациейКлиент =
//		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
//	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиСобытийЭлементовТаблицыФормыРоли

//////////////////////////////////////////////////////////////////////////////////
//// Для работы интерфейса ролей.

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицы.Пометка И СтрокаТаблицы.Имя = "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок" Тогда
		//Оповещение = Новый ОписаниеОповещения("РолиПометкаПриИзмененииПослеПодтверждения", ЭтотОбъект);
		//ПараметрыФормы = Новый Структура("Ключ", "ПередВыборомРоли");
		//ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
	Иначе
		Если СтрокаТаблицы.Имя = "ПолныеПрава" Тогда
			//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
		КонецЕсли;
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РолиПометкаПриИзмененииПослеПодтверждения(Ответ, ПараметрыВыполнения) Экспорт
	СтрокаТаблицы = Элементы.Роли.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Ответ = "Продолжить" Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	Иначе
		СтрокаТаблицы.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

//#КонецОбласти

//#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	//ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	
	//ПользователиСлужебныйКлиент.ОткрытьФормуСменыПароля(Объект.Ссылка, Новый ОписаниеОповещения(
	//	"СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВернутьПарольБезУстановки", Истина);
	ПараметрыФормы.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	ПараметрыФормы.Вставить("Пользователь", Объект.Ссылка);
	
	ОбработкаПродолжения = Новый ОписаниеОповещения(
		"СменитьПарольПослеПолученияПароля", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.СменаПароля", ПараметрыФормы,,,,, ОбработкаПродолжения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	РазвернутьПодсистемыРолей(ЭтотОбъект);
	
КонецПроцедуры

// Только для внутреннего использования.
//
&НаКлиенте
Процедура РазвернутьПодсистемыРолей(Форма, Безусловно = Истина) Экспорт
	
	//Элементы = Форма.Элементы;
	
	Если НЕ Безусловно
	   И НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка Тогда
		
		Возврат;
	КонецЕсли;
	
	// Развернуть все.
	Для каждого Строка Из Форма.Роли.ПолучитьЭлементы() Цикл
		Элементы.Роли.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");
	
	РазвернутьПодсистемыРолей(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Поддержка дополнительных реквизитов.

//&НаКлиенте
//Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
//	
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
//		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ПолныеПрава'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиПометка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РолиСиноним.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Роли.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'ПолныеПрава'");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);

КонецПроцедуры

//&НаКлиенте
//Процедура ПриИзмененияИспользованияВнешнихПользователей()
//	
//	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора()
//	
//	Элементы.ПользовательИБПоказыватьВСпискеВыбора.Видимость =
//		  Не ОбщегоНазначения.РазделениеВключено()
//		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей")
//	
//КонецПроцедуры

&НаСервере
Процедура ОбщаяНастройкаФормы(ТекущийОбъект, ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;
	
	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСлужебный.ПрочитатьСведенияОПользователе(ЭтотОбъект);
	УстановитьПривилегированныйРежим(Ложь);
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(ТекущийОбъект);
	
	ОпределитьДействияВФорме();
//	
//	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
//	
//	ОбработатьИнтерфейсРолей("УстановитьТолькоПросмотрРолей",
//		    ПользователиСлужебный.ЗапретРедактированияРолей()
//		Или ДействияВФорме.Роли <> "Редактирование"
//		Или Не УровеньДоступа.НастройкиДляВхода);
//	
//	Если ОбщегоНазначения.РазделениеВключено()
//	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
//		
//		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
//		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса(
//			ТекущийОбъект.Ссылка);
//	КонецЕсли;
//	
	// Настройка возможности просмотра.
//	Элементы.КонтактнаяИнформация.Видимость   = ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	
	ВыводитьСписокРолей = ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.ОтображениеРолей.Видимость = ВыводитьСписокРолей;
	Элементы.СвойстваАутентификации1СПредприятия.Отображение =
		?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.ОбычноеВыделение);
	
//	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость =
//		  УровеньДоступа.ИзменениеРазрешенияНаВход
//		И ТекущийОбъект.Подготовлен
//		И Не ПриЧтенииВходВПрограммуРазрешен;
//	
//	// Настройка возможности изменения.
//	Если ТекущийОбъект.Служебный Тогда
//		ТолькоПросмотр = Истина;
//	КонецЕсли;
//	Элементы.ГруппаСлужебныйПользователь.Видимость = ТекущийОбъект.Служебный;
//	
//	ТолькоПросмотр = ТолькоПросмотр
//		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
//		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
//		  И ДействияВФорме.КонтактнаяИнформация   <> "Редактирование"
//		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";
//	
//	ПользователиСлужебныйКлиентСервер.УстановитьДоступностьКнопкиЗаписатьИЗакрыть(ЭтотОбъект);
//	
//	Элементы.Наименование.ТолькоПросмотр =
//		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
//	
//	Элементы.Недействителен.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
//	Элементы.ФизическоеЛицо.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр;
//	Элементы.Подразделение.ТолькоПросмотр  = Элементы.Наименование.ТолькоПросмотр;
//	
//	Элементы.ОсновныеСвойства.ТолькоПросмотр =
//		Не (  ДействияВФорме.СвойстваПользователяИБ = "Редактирование"
//		    И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	
	Элементы.ПользовательИБИмя1.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБИмя2.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияОС.ТолькоПросмотр          = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБПользовательОС.ТолькоПросмотр            = Не УровеньДоступа.НастройкиДляВхода;
	
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПотребоватьСменуПароляПриВходе.ТолькоПросмотр        = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБРежимЗапуска.ТолькоПросмотр            = Не УровеньДоступа.УправлениеСписком;
	
//	Элементы.Комментарий.ТолькоПросмотр =
//		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
//	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

//&НаСервере
//Процедура ПодготовитьНеобязательныйРеквизит(ИмяРеквизита)
//	
//	Если ТипЗнч(Объект[ИмяРеквизита]) = Тип("Строка") Тогда
//		Элементы[ИмяРеквизита].Видимость = Ложь;
//	Иначе
//		ТипыПодразделения = Метаданные.ОпределяемыеТипы[ИмяРеквизита].Тип.Типы();
//		Если ТипыПодразделения.Количество() = 1 И ОбщегоНазначения.ЭтоСсылка(ТипыПодразделения[0]) Тогда
//			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипыПодразделения[0]);
//			Элементы[ИмяРеквизита].Заголовок = ПредставлениеОбъекта(ОбъектМетаданных);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Функция ПредставлениеОбъекта(ОбъектМетаданных)
//	
//	Если ЗначениеЗаполнено(ОбъектМетаданных.ПредставлениеОбъекта) Тогда
//		Возврат ОбъектМетаданных.ПредставлениеОбъекта;
//	КонецЕсли;
//	
//	Возврат ОбъектМетаданных.Представление();
//	
//КонецФункции

//// Продолжение обработчика события ПередЗаписью.
//&НаКлиенте
//Процедура ПослеЗапросаПароляДляАутентификацииВСервисеПередЗаписью(НовыйПарольПользователяСервиса, ПараметрыЗаписи) Экспорт
//	
//	Если НовыйПарольПользователяСервиса = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
//	
//	Попытка
//		Записать(ПараметрыЗаписи);
//	Исключение
//		ПарольПользователяСервиса = Неопределено;
//		ВызватьИсключение;
//	КонецПопытки;
//	
//КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма, ПриИзмененииНаименования = Ложь)
	
	Элементы = Форма.Элементы;
	//Объект   = Форма.Объект;
	
	Если Форма.ПользовательИБСуществует Тогда
		Возврат;
	КонецЕсли;
	
	КраткоеИмя = ПолучитьКраткоеИмяПользователяИБ(Форма.Объект.Наименование);
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = Элементы.ИмяБезОтметкиНезаполненного Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ПользовательИБИмяЗначениеПрямогоИзменения)
		   И Форма.ПользовательИБИмя = КраткоеИмя Тогда
			
			Форма.ПользовательИБИмя = "";
		КонецЕсли;
	Иначе
		Если ПриИзмененииНаименования
		 Или Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда
			
			Форма.ПользовательИБИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	Если НЕ ПользовательИБАутентификацияOpenID
	   И НЕ ПользовательИБАутентификацияСтандартная
	   И НЕ ПользовательИБАутентификацияОС Тогда
	
		ВходВПрограммуРазрешен = Ложь;
		
	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПослеСменыПочты(Результат, Контекст) Экспорт
//	
//	Если Результат = "" Тогда
//		ПарольПользователяСервиса = Неопределено;
//	КонецЕсли;
//	
//КонецПроцедуры

// Продолжение процедуры СменитьПароль.
&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;
	
	Если Результат.СтарыйПароль <> Неопределено Тогда
		ПарольПользователяСервиса = Результат.СтарыйПароль;
	КонецЕсли;
	//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль));
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен)
	
	Элементы = Форма.Элементы;
	
	Если ПарольУстановлен Тогда
		Элементы.НадписьНаличиеПароля.Заголовок = НСтр("ru = 'Пароль установлен'");
		Элементы.ПотребоватьСменуПароляПриВходе.Заголовок =
			НСтр("ru = 'Потребовать смену пароля при входе'");
	Иначе
		Элементы.НадписьНаличиеПароля.Заголовок = НСтр("ru = 'Пустой пароль'");
		Элементы.ПотребоватьСменуПароляПриВходе.Заголовок =
			НСтр("ru = 'Потребовать установку пароля при входе'");
	КонецЕсли;
	
	Если ПарольУстановлен
	   //И Форма.Объект.Ссылка = ПользователиКлиентСервер.АвторизованныйПользователь() 
	   Тогда
		
		Элементы.СменитьПароль.Заголовок = НСтр("ru = 'Сменить пароль...'");
	Иначе
		Элементы.СменитьПароль.Заголовок = НСтр("ru = 'Установить пароль...'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("КонтактнаяИнформация", "Просмотр");
	
	// "", "ПросмотрВсех", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");
	
	Если Не УровеньДоступа.АдминистраторСистемы
	   И УровеньДоступа.ПолныеПрава
	   И Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка, Истина) Тогда
		
		// Администратор системы доступен только на просмотр.
		ДействияВФорме.Роли                   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	
	ИначеЕсли УровеньДоступа.АдминистраторСистемы
	      ИЛИ УровеньДоступа.ПолныеПрава Тогда
		
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	Иначе
		Если УровеньДоступа.ИзменениеТекущего Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			// Ответственный за список пользователей и групп пользователей.
			// (Исполнитель распоряжений о приеме на работу и переводу,
			//  переназначению, созданию отделов, подразделений и рабочих групп).
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
			ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
			ДействияВФорме.СвойстваЭлемента       = "Редактирование";
			
			Если УровеньДоступа.НастройкиДляВхода Тогда
				ДействияВФорме.Роли = "Редактирование";
			КонецЕсли;
			Если Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка) Тогда
				ДействияВФорме.Роли = "Просмотр";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//ПользователиСлужебный.ПриОпределенииДействийВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
		
	ИначеЕсли ДействияВФорме.Роли = "Редактирование"
	       // И ПользователиСлужебный.ЗапретРедактированияРолей()
			Тогда
		
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,",
	           ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		
		ДействияВФорме.СвойстваПользователяИБ = "";
		
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
			
		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
	//Если Объект.Служебный Тогда
	//	Если ДействияВФорме.Роли = "Редактирование" Тогда
	//		ДействияВФорме.Роли = "Просмотр";
	//	КонецЕсли;
	//	
	//	Если ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
	//		ДействияВФорме.КонтактнаяИнформация = "Просмотр";
	//	КонецЕсли;
	//	
	//	Если ДействияВФорме.СвойстваПользователяИБ = "Редактирование" Тогда
	//		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	//	КонецЕсли;
	//	
	//	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
	//		ДействияВФорме.СвойстваЭлемента = "Просмотр";
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ(ДляПроверкиПервогоАдминистратора = Ложь)
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		ПользовательИБПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если УровеньДоступа.АдминистраторСистемы
	 Или УровеньДоступа.ПолныеПрава Тогда
		
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтотОбъект,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");
		
		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);
	Иначе
		Результат = Новый Структура;
		
		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",  ВходВПрограммуРазрешен);
			Результат.Вставить("ПоказыватьВСпискеВыбора", ПользовательИБПоказыватьВСпискеВыбора
				);//И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
			Результат.Вставить("ЗапрещеноИзменятьПароль", ПользовательИБЗапрещеноИзменятьПароль);
			Результат.Вставить("Язык",                    ПользовательИБЯзык);
			Результат.Вставить("РежимЗапуска",            ПользовательИБРежимЗапуска);
			
			Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				Результат.Вставить("ПолноеИмя", ПользовательИБПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная", ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Имя",                       ПользовательИБИмя);
			Результат.Вставить("Пароль",                    ПользовательИБПароль);
			Результат.Вставить("АутентификацияOpenID",      ПользовательИБАутентификацияOpenID);
			Результат.Вставить("АутентификацияОС",          ПользовательИБАутентификацияОС);
			Результат.Вставить("ПользовательОС",            ПользовательИБПользовательОС);
		КонецЕсли;
	КонецЕсли;
	
	Если Не УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Результат;
	КонецЕсли;
	
	//Если Не ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	//КонецЕсли;
	
	Если ДляПроверкиПервогоАдминистратора Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Добавление ролей требуемых при создании первого администратора.
	Если Пользователи.ТребуетсяСоздатьПервогоАдминистратора(Результат) Тогда
		
		Если Результат.Свойство("Роли") И Результат.Роли <> Неопределено Тогда
			РолиАдминистратора = Результат.Роли;
		Иначе
			РолиАдминистратора = Новый Массив;
		КонецЕсли;
		
		Если РолиАдминистратора.Найти("ПолныеПрава") = Неопределено Тогда
			РолиАдминистратора.Добавить("ПолныеПрава");
		КонецЕсли;
		
		Если РолиАдминистратора.Найти("АдминистраторСистемы") = Неопределено Тогда
			РолиАдминистратора.Добавить("АдминистраторСистемы");
		КонецЕсли;
		Результат.Вставить("Роли", РолиАдминистратора);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса = Неопределено)
	
	Возврат Пользователи.ТребуетсяСоздатьПервогоАдминистратора(
		ОписаниеПользователяИБ(Истина), ТекстВопроса);
	
КонецФункции

//&НаКлиентеНаСервереБезКонтекста
//Процедура УстановитьНеобходимостьСинхронизацииССервисом(Форма)
//	
//	Форма.ТребуетсяСинхронизацияССервисом = Истина;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОЗаписиСПустымСпискомРолей(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("СПустымСпискомРолей");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПервогоАдминистратора() 
	
	ПараметрыЗаписи = ПараметрыЗаписиПриПроверкеПервогоАдминистратора;
	ПараметрыЗаписиПриПроверкеПервогоАдминистратора = Неопределено;
	
	ТекстВопроса = "";
	Если Не ТребуетсяСоздатьПервогоАдминистратора(ТекстВопроса) Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Попытка
			Записать(ПараметрыЗаписи);
		Исключение
			ПарольПользователяСервиса = Неопределено;
			ВызватьИсключение;
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	ЗаголовокВопроса = НСтр("ru = 'Запись пользователя информационной базы'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ПослеПодтвержденияСозданияПервогоАдминистратора", ЭтотОбъект, ПараметрыЗаписи),
		ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияСозданияПервогоАдминистратора(Ответ, ПараметрыЗаписи) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда
		ПараметрыЗаписи.Вставить("ССозданиемПервогоАдминистратора");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПослеОтветаНаВопросОКопированииПрав(Ответ, ПараметрыЗаписи) Экспорт
//	
//	Если Ответ = КодВозвратаДиалога.Да Тогда
//		ПараметрыЗаписи.Вставить("КопироватьПраваПользователя");
//	Иначе
//		ПараметрыЗаписи.Вставить("НеКопироватьПраваПользователя");
//	КонецЕсли;
//	Записать(ПараметрыЗаписи);
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Поддержка контактной информации.

//&НаСервере
//Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
//	
//	МодульУправлениеКонтактнойИнформацией =
//		ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
//	
//	Возврат МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(
//		ЭтотОбъект, Объект, Результат);
//	
//КонецФункции

//&НаСервере
//Процедура ПереопределитьРедактированиеКонтактнойИнформацииВСервисе()
//	
//	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КонтактнаяИнформация = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
//	
//	СтрокаEMail = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].EmailПользователя))[0];
//	ЭлементEMail = Элементы[СтрокаEMail.ИмяРеквизита];
//	ЭлементEMail.УстановитьДействие("ПриИзменении", "Подключаемый_EMailПриИзменении");
//	ЭлементEMail.УстановитьДействие("Очистка",      "Подключаемый_EMailОчистка");
//	ЭлементEMail.АвтоОтметкаНезаполненного = Истина;
//	
//	ЭлементEMail.КнопкаВыбора = ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]);
//	ЭлементEMail.РедактированиеТекста = Не ЭлементEMail.КнопкаВыбора;
//	ЭлементEMail.УстановитьДействие("НачалоВыбора", "Подключаемый_EMailНачалоВыбора");
//	
//	СтрокаТелефон = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].ТелефонПользователя))[0];
//	ЭлементТелефон = Элементы[СтрокаТелефон.ИмяРеквизита];
//	ЭлементТелефон.УстановитьДействие("ПриИзменении", "Подключаемый_ТелефонПриИзменении");
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьСпособИзмененияEMailВСервисе()
//	
//	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
//		Возврат;
//	КонецЕсли;
//	
//	КонтактнаяИнформация = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
//	
//	СтрокаEMail = КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", Справочники["ВидыКонтактнойИнформации"].EmailПользователя))[0];
//	ЭлементEMail = Элементы[СтрокаEMail.ИмяРеквизита];
//	
//	ЭлементEMail.КнопкаВыбора = ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]);
//	ЭлементEMail.РедактированиеТекста = Не ЭлементEMail.КнопкаВыбора;
//	
//КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Функция ВидКонтактнойИнформацииEmailПользователя()
//	
//	ИмяПредопределенногоЗначения = "Справочник." + "ВидыКонтактнойИнформации" + ".EmailПользователя";
//	
//	Возврат ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
//	
//КонецФункции

//&НаСервере
//Процедура ПроверитьЗаполнениеEmail(Отказ)
//	
//	ТаблицаКИ = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
//	
//	СтрокаEMail = ТаблицаКИ.НайтиСтроки(Новый Структура("Вид",
//		ВидКонтактнойИнформацииEmailПользователя()))[0];
//	
//	Если ЗначениеЗаполнено(ЭтотОбъект[СтрокаEMail.ИмяРеквизита]) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Не заполнен адрес электронной почты'"),,
//		СтрокаEMail.ИмяРеквизита,, Отказ);
//	
//КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
//// Поддержка дополнительных реквизитов.

//&НаСервере
//Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
//		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
//	
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
//		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
//	
//	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
//		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Процедура ОбновитьЭлементыДополнительныхРеквизитов()
//	
//	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
//		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
//		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
//	КонецЕсли;
//	
//КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Обработка пользователя ИБ

&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;
		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	//Если ОбщегоНазначения.РазделениеВключено() Тогда
	//	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	//Иначе
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Истина;
	//		НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
	//КонецЕсли;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	
	Возврат ОписаниеПользователяИБ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ПользовательИБОсновной   = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
	
	Если ПриКопированииЭлемента Тогда
		
		ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			
			// Сопоставление пользователя ИБ с пользователем в справочнике.
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
			
			// Копирование свойств и ролей пользователяИБ.
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"ЗапрещеноИзменятьПароль,
				|ПоказыватьВСпискеВыбора,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ",
				|Роли"
				);
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
		УстановитьНаличиеПароля(ЭтотОбъект, Ложь);
	Иначе
		ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
		
			ПользовательИБСуществует = Истина;
			ПользовательИБОсновной = Истина;
		
		ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ")
		        И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			
			Объект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(Объект.ИдентификаторПользователяИБ);
			Если ПрочитанныеСвойства <> Неопределено Тогда
				
				ПользовательИБСуществует = Истина;
				Если Объект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
					Объект.Наименование = ПрочитанныеСвойства.ПолноеИмя;
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПользовательИБСуществует Тогда
			
			Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ОписаниеПользователяИБ,
				ПрочитанныеСвойства,
				"Имя,
				|ПолноеИмя,
				|АутентификацияOpenID,
				|АутентификацияСтандартная,
				|ПоказыватьВСпискеВыбора,
				|ЗапрещеноИзменятьПароль,
				|АутентификацияОС,
				|ПользовательОС,
				|ОсновнойИнтерфейс,
				|РежимЗапуска" + ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",
				|Язык") + ",
				|Роли");
		КонецЕсли;
		
		Если ПрочитанныеСвойства = Неопределено Тогда
			УстановитьНаличиеПароля(ЭтотОбъект, Ложь);
		Иначе
			УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен);
		КонецЕсли;
	КонецЕсли;
	
	Пользователи.СкопироватьСвойстваПользователяИБ(
		ЭтотОбъект,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,
		|Роли" //+ ?(ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"), ",
		//|ПоказыватьВСпискеВыбора", "")
		,
		"ПользовательИБ");
	
	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства = ПользователиСлужебный.ХранимыеСвойстваПользователяИБ(Объект.Ссылка);
		ПользовательИБАутентификацияOpenID      = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияСтандартная = ХранимыеСвойства.АутентификацияСтандартная;
		ПользовательИБАутентификацияОС          = ХранимыеСвойства.АутентификацияОС;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", ОписаниеПользователяИБ.Роли);
	
	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРоли(Параметры)
	
	ПрочитанныеРоли = Параметры.ОсновнойПараметр;
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	
	КоллекцияРолей.Очистить();
	ДобавленныеРоли = Новый Соответствие;
	
	Если ТипЗнч(ПрочитанныеРоли) = Тип("Массив") Тогда
		Для Каждого Роль Из ПрочитанныеРоли Цикл
			Если ДобавленныеРоли.Получить(Роль) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавленныеРоли.Вставить(Роль, Истина);
			КоллекцияРолей.Добавить().Роль = Роль;
		КонецЦикла;
	Иначе
		ИдентификаторыРолей = Новый Массив;
//		Для Каждого Строка Из ПрочитанныеРоли Цикл
//			Если ТипЗнч(Строка.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
//			 Или ТипЗнч(Строка.Роль) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
//				ИдентификаторыРолей.Добавить(Строка.Роль);
//			КонецЕсли;
//		КонецЦикла;
		ПрочитанныеРоли = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(
			ИдентификаторыРолей, Истина);
		
		Для Каждого ОписаниеРоли Из ПрочитанныеРоли Цикл
			Если ТипЗнч(ОписаниеРоли.Значение) <> Тип("ОбъектМетаданных") Тогда
				Роль = ОписаниеРоли.Ключ;
				ИмяРоли = Роль.Имя;
				ИмяРоли = ?(ИмяРоли = Неопределено, "(" + Роль.УникальныйИдентификатор() + ")", ИмяРоли);
				ИмяРоли = ?(Лев(ИмяРоли, 1) = "?", ИмяРоли, "? " + СокрЛ(ИмяРоли));
				КоллекцияРолей.Добавить().Роль = СокрЛП(ИмяРоли);
			Иначе
				КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Значение.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставРолей(Параметры)
	
	//Роли                        = Параметры.Форма.Роли;
	//ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	//НазначениеРолей             = Параметры.НазначениеРолей;
	
	ВсеРоли         = ВсеРоли().Массив;
	НедоступныеРоли = Новый Соответствие; //ПользователиСлужебныйПовтИсп.НедоступныеРоли(НазначениеРолей);
	
	Если Параметры.ОсновнойПараметр = "ВключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Истина;
		
	ИначеЕсли Параметры.ОсновнойПараметр = "ИсключитьВсе" Тогда
		ИдентификаторСтроки = Неопределено;
		Добавить            = Ложь;
	Иначе
		ИдентификаторСтроки = Параметры.Форма.Элементы.Роли.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		БылУстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
			Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
		
		// Обработка всех.
		КоллекцияРолей = Параметры.КоллекцияРолей;
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			Для Каждого ИмяРоли Из ВсеРоли Цикл
				
				Если ИмяРоли = "ПолныеПрава"
				 Или ИмяРоли = "АдминистраторСистемы"
				 Или НедоступныеРоли.Получить(ИмяРоли) <> Неопределено
				 Или ВРег(Лев(ИмяРоли, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
					
					Продолжить;
				КонецЕсли;
				КоллекцияРолей.Добавить().Роль = ИмяРоли;
			КонецЦикла;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗапретИзмененияАдминистративногоДоступа")
			И Параметры.ЗапретИзмененияАдминистративногоДоступа Тогда
			
			УстановленАдминистративныйДоступ = Параметры.КоллекцияРолей.НайтиСтроки(
				Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
			
			Если УстановленАдминистративныйДоступ И НЕ БылУстановленАдминистративныйДоступ Тогда
				Отбор = Новый Структура("Роль", "ПолныеПрава");
				Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Удалить(0);
				
			ИначеЕсли БылУстановленАдминистративныйДоступ И НЕ УстановленАдминистративныйДоступ Тогда
				КоллекцияРолей.Добавить().Роль = "ПолныеПрава";
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей(Параметры);
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, ТекущиеДанные.Имя, ТекущиеДанные.Пометка);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Пометка);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Параметры, Роли.ПолучитьЭлементы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПометкуВыбранныхРолей(Параметры, Знач Коллекция)
	
	ПоказатьТолькоВыбранныеРоли = Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Отбор = Новый Структура("Роль", Строка.Имя);
			Строка.Пометка = Параметры.КоллекцияРолей.НайтиСтроки(Отбор).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Параметры, Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРолиПодсистемы(Параметры, Знач Коллекция, Знач Добавить)
	
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Параметры, Строка.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Параметры, Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРоль(Параметры, Знач Роль, Знач Добавить)
	
	НайденныеРоли = Параметры.КоллекцияРолей.НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			Параметры.КоллекцияРолей.Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			Параметры.КоллекцияРолей.Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсистемыИРоли(КоллекцияСтрокДерева, Подсистемы, НедоступныеРоли, ВсеРоли = Неопределено)
	
	Если Подсистемы = Неопределено Тогда
		Подсистемы = Метаданные.Подсистемы;
	КонецЕсли;
	
	Если ВсеРоли = Неопределено Тогда
		ВсеРоли = Новый Соответствие;
		Для Каждого Роль Из Метаданные.Роли Цикл
			
			Если НедоступныеРоли.Получить(Роль.Имя) <> Неопределено
			 Или ВРег(Лев(Роль.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
			
				Продолжить;
			КонецЕсли;
			ВсеРоли.Вставить(Роль, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		ОписаниеПодсистемы = КоллекцияСтрокДерева.Добавить();
		ОписаниеПодсистемы.Имя     = Подсистема.Имя;
		ОписаниеПодсистемы.Синоним = ?(ЗначениеЗаполнено(Подсистема.Синоним), Подсистема.Синоним, Подсистема.Имя);
		
		ЗаполнитьПодсистемыИРоли(ОписаниеПодсистемы.Строки, Подсистема.Подсистемы, НедоступныеРоли, ВсеРоли);
		
		Для Каждого ОбъектМетаданных Из Подсистема.Состав Цикл
			Если ВсеРоли[ОбъектМетаданных] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Роль = ОбъектМетаданных;
			ОписаниеРоли = ОписаниеПодсистемы.Строки.Добавить();
			ОписаниеРоли.ЭтоРоль = Истина;
			ОписаниеРоли.Имя     = Роль.Имя;
			ОписаниеРоли.Синоним = ?(ЗначениеЗаполнено(Роль.Синоним), Роль.Синоним, Роль.Имя);
		КонецЦикла;
		
		Отбор = Новый Структура("ЭтоРоль", Истина);
		Если ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор, Истина).Количество() = 0 Тогда
			КоллекцияСтрокДерева.Удалить(ОписаниеПодсистемы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Возвращает дерево ролей с подсистемами или без них.
// Если роль не принадлежит ни одной подсистеме она добавляется "в корень".
// 
// Параметры:
//  ПоПодсистемам - Булево, если Ложь, все роли добавляются в "корень".
//  Назначение    - Строка - "ДляАдминистраторов", "ДляПользователей", "ДляВнешнихПользователей",
//                           "СовместноДляПользователейИВнешнихПользователей".
// 
// Возвращаемое значение:
//  ДеревоЗначений с колонками:
//    ЭтоРоль - Булево
//    Имя     - Строка - имя     роли или подсистемы.
//    Синоним - Строка - синоним роли или подсистемы.
//
Функция ДеревоРолей(ПоПодсистемам = Истина, Назначение = "ДляПользователей") Экспорт
	
	//ПроверитьНазначение(Назначение,
	//	НСтр("ru = 'Ошибка в функции ДеревоРолей общего модуля ПользователиСлужебныйПовтИсп.'"));
	
	НедоступныеРоли = Новый Соответствие; //ПользователиСлужебныйПовтИсп.НедоступныеРоли(Назначение);
	
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("ЭтоРоль", Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Имя",     Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Синоним", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000)));
	
	Если ПоПодсистемам Тогда
		ЗаполнитьПодсистемыИРоли(Дерево.Строки, , НедоступныеРоли);
	КонецЕсли;
	
	// Добавление ненайденных ролей.
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		Если НедоступныеРоли.Получить(Роль.Имя) <> Неопределено
		 Или ВРег(Лев(Роль.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
			
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Роль.Имя);
		Если Дерево.Строки.НайтиСтроки(Отбор, Истина).Количество() = 0 Тогда
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.ЭтоРоль       = Истина;
			СтрокаДерева.Имя           = Роль.Имя;
			СтрокаДерева.Синоним       = ?(ЗначениеЗаполнено(Роль.Синоним), Роль.Синоним, Роль.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Дерево.Строки.Сортировать("ЭтоРоль Убыв, Синоним Возр", Истина);
	
	Возврат Новый ХранилищеЗначения(Дерево);
	
КонецФункции


&НаСервере
Процедура ОбновитьДеревоРолей(Параметры)
	
	//Форма           = Параметры.Форма;
	//Элементы        = Форма.Элементы;
	//Роли            = Форма.Роли;
	//КоллекцияРолей  = Параметры.КоллекцияРолей;
	НазначениеРолей = Параметры.НазначениеРолей;
	
	СкрытьРольПолныеПрава = Параметры.Свойство("СкрытьРольПолныеПрава")
	                      И Параметры.СкрытьРольПолныеПрава = Истина;
	
	Если Элементы.Найти("РолиПоказатьТолькоВыбранныеРоли") <> Неопределено Тогда
		Если НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Доступность Тогда
			Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = Истина;
		КонецЕсли;
		ПоказатьТолькоВыбранныеРоли = Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	Иначе
		ПоказатьТолькоВыбранныеРоли = Истина;
	КонецЕсли;
	
	ПоказатьПодсистемыРолей = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	// Запоминание текущей строки.
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.Роли.ТекущаяСтрока = Неопределено;
			
		ИначеЕсли ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяРоль       = ТекущиеДанные.Имя;
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "",
				ТекущиеДанные.ПолучитьРодителя().Имя);
		Иначе
			ТекущаяРоль       = "";
			ТекущаяПодсистема = ТекущиеДанные.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоРолей = ДеревоРолей(//ПользователиСлужебныйПовтИсп.ДеревоРолей(
		ПоказатьПодсистемыРолей, НазначениеРолей).Получить();
	
	ДеревоРолей.Колонки.Добавить("ЭтоНедоступнаяРоль",    Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("ЭтоНесуществующаяРоль", Новый ОписаниеТипов("Булево"));
	ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей);
	
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли,
		Параметры.КоллекцияРолей);
	
	ЗначениеВРеквизитФормы(ДеревоРолей, "Роли"); //Параметры.Форма.ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено,
		ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки.
	Отбор = Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема);
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено,
			ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли,
			ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(
					ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль);
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено,
				ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено,
			СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(
				СтрокаДереваЗначений.Родитель);
			
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево,
			СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции

Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач СкрытьРольПолныеПрава, Знач ПоказатьТолькоВыбранныеРоли, КоллекцияРолей)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, СкрытьРольПолныеПрава, ПоказатьТолькоВыбранныеРоли,
			КоллекцияРолей);
		
		Если Строка.ЭтоРоль Тогда
			Если СкрытьРольПолныеПрава
			   И (    ВРег(Строка.Имя) = ВРег("ПолныеПрава")
			      ИЛИ ВРег(Строка.Имя) = ВРег("АдминистраторСистемы")) Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 7;
				Строка.Пометка = КоллекцияРолей.НайтиСтроки(
					Новый Структура("Роль", Строка.Имя)).Количество() > 0;
				
				Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
					Коллекция.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 6;
				Строка.Пометка = Строка.Строки.НайтиСтроки(
					Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИменаНесуществующихИНедоступныхРолей(Параметры, ДеревоРолей)
	
	КоллекцияРолей  = Параметры.КоллекцияРолей;
	ВсеРоли = ВсеРоли().Соответствие;
	
	НедоступныеРоли    = Новый СписокЗначений;
	НесуществующиеРоли = Новый СписокЗначений;
	
	// Добавление несуществующих ролей.
	Для каждого Строка Из КоллекцияРолей Цикл
		Отбор = Новый Структура("ЭтоРоль, Имя", Истина, Строка.Роль);
		Если ДеревоРолей.Строки.НайтиСтроки(Отбор, Истина).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		Синоним = ВсеРоли.Получить(Строка.Роль);
		Если Синоним = Неопределено Тогда
			НесуществующиеРоли.Добавить(Строка.Роль,
				?(Лев(Строка.Роль, 1) = "?", Строка.Роль, "? " + Строка.Роль));
		Иначе
			НедоступныеРоли.Добавить(Строка.Роль, Синоним);
		КонецЕсли;
	КонецЦикла;
	
	НедоступныеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НедоступныеРоли Цикл
		Индекс = НедоступныеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева = ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     = ОписаниеРоли.Значение;
		СтрокаДерева.Синоним = ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль = Истина;
		СтрокаДерева.ЭтоНедоступнаяРоль = Истина;
	КонецЦикла;
	
	НесуществующиеРоли.СортироватьПоПредставлению();
	Для Каждого ОписаниеРоли Из НесуществующиеРоли Цикл
		Индекс = НесуществующиеРоли.Индекс(ОписаниеРоли);
		СтрокаДерева = ДеревоРолей.Строки.Вставить(Индекс);
		СтрокаДерева.Имя     = ОписаниеРоли.Значение;
		СтрокаДерева.Синоним = ОписаниеРоли.Представление;
		СтрокаДерева.ЭтоРоль = Истина;
		СтрокаДерева.ЭтоНесуществующаяРоль = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеРоли() Экспорт
	
	Массив = Новый Массив;
	Соответствие = Новый Соответствие;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(256)));
	
	Для каждого Роль Из Метаданные.Роли Цикл
		ИмяРоли = Роль.Имя;
		
		Массив.Добавить(ИмяРоли);
		Соответствие.Вставить(ИмяРоли, Роль.Синоним);
		Таблица.Добавить().Имя = ИмяРоли;
	КонецЦикла;
	
	ВсеРоли = Новый Структура;
	ВсеРоли.Вставить("Массив",       Новый ФиксированныйМассив(Массив));
	ВсеРоли.Вставить("Соответствие", Новый ФиксированноеСоответствие(Соответствие));
	ВсеРоли.Вставить("Таблица",      Новый ХранилищеЗначения(Таблица));
	
	Возврат ВсеРоли; //ОбщегоНазначения.ФиксированныеДанные(ВсеРоли, Ложь);
	
КонецФункции


//&НаСервере
//Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
//	
//	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
//	// реквизита Наименование пользователя.
//	
//	ПоказатьНесоответствие = Истина;
//	ПоказатьКомандыУстраненияРазличий = Ложь;
//	
//	Если НЕ ПользовательИБСуществует Тогда
//		ПоказатьНесоответствие = Ложь;
//		
//	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
//		Объект.Наименование = ПользовательИБПолноеИмя;
//		ПоказатьНесоответствие = Ложь;
//		
//	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
//		
//		УточнениеСвойств = Новый Массив;
//		
//		Если ПользовательИБПолноеИмя <> Объект.Наименование Тогда
//			ПоказатьКомандыУстраненияРазличий =
//				    ПоказатьКомандыУстраненияРазличий
//				Или ДействияВФорме.СвойстваЭлемента = "Редактирование";
//			
//			УточнениеСвойств.Вставить(0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Полное имя ""%1""'"),
//				ПользовательИБПолноеИмя));
//		КонецЕсли;
//		
//		Если УточнениеСвойств.Количество() > 0 Тогда
//			СтрокаУточненияСвойств = "";
//			ТекущаяСтрока = "";
//			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
//				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
//					СтрокаУточненияСвойств = СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
//					ТекущаяСтрока = "";
//				КонецЕсли;
//				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
//			КонецЦикла;
//			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
//				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
//			КонецЕсли;
//			Если ПоказатьКомандыУстраненияРазличий Тогда
//				Рекомендация = Символы.ПС
//					+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.'");
//			
//			ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
//				Рекомендация = Символы.ПС
//					+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'");
//			Иначе
//				Рекомендация = "";
//			КонецЕсли;
//			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
//				           |%1.'"),
//				СтрокаУточненияСвойств) + Рекомендация;
//		Иначе
//			ПоказатьНесоответствие = Ложь;
//		КонецЕсли;
//	Иначе
//		ПоказатьНесоответствие = Ложь;
//	КонецЕсли;
//	
//	Элементы.СвойстваОбработкаНесоответствия.Видимость   = ПоказатьНесоответствие;
//	Элементы.СвойстваКомандыУстраненияРазличий.Видимость = ПоказатьКомандыУстраненияРазличий;
//	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение = ?(ЗначениеЗаполнено(Рекомендация),
//		ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);
//	
//	// Определение сопоставление несуществующего пользователя ИБ с пользователем в справочнике.
//	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ
//		= НЕ ПользовательИБСуществует
//		И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
//	
//	Если ПараметрыЗаписи <> Неопределено
//	   И ЕстьСопоставлениеСНесуществующимПользователемИБ
//	   И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
//		
//		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Объект.Ссылка);
//	КонецЕсли;
//	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;
//	
//	Если УровеньДоступа.УправлениеСписком Тогда
//		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
//	Иначе
//		// Сопоставление не может быть изменено.
//		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
//	КонецЕсли;
//	
//	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
//		Рекомендация = Символы.ПС
//			+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.'");
//		
//	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
//		Рекомендация = Символы.ПС
//			+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'");
//	Иначе
//		Рекомендация = "";
//	КонецЕсли;
//	
//	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок =
//		НСтр("ru = 'Пользователь информационной базы не найден.'") + Рекомендация;
//	
//КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПоПользователюИБНаСервере()
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		Объект.Наименование = ПользовательИБПолноеИмя;
	КонецЕсли;
	
	//ОпределитьНесоответствияПользователяСПользователемИБ();
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	//УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// Начальное заполнение, проверка заполнения, доступность свойств.

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы       = Форма.Элементы;
	//Объект         = Форма.Объект;
	//ДействияВФорме = Форма.ДействияВФорме;
	УровеньДоступа = Форма.УровеньДоступа;
	//ДействияСПользователемСервиса = Форма.ДействияСПользователемСервиса;
	
	// Настройка возможности изменения.
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр =
		Не (  Элементы.ОсновныеСвойства.ТолькоПросмотр = Ложь
		    И (    УровеньДоступа.ИзменениеРазрешенияНаВход
		       Или УровеньДоступа.ОтключениеРазрешенияНаВход И Форма.ПриЧтенииВходВПрограммуРазрешен));
	
	Элементы.СменитьПароль.Доступность =
		(    УровеньДоступа.НастройкиДляВхода
		 Или УровеньДоступа.ИзменениеТекущего
		   И Не Форма.ПользовательИБЗапрещеноИзменятьПароль)
		;//И Не Объект.Служебный;
	
	// Настройка необходимости заполнения.
	Если ТребуетсяЗаписьПользователяИБ(Форма, Ложь) Тогда
		НоваяСтраница = Элементы.ИмяСОтметкойНезаполненного;
	Иначе
		НоваяСтраница = Элементы.ИмяБезОтметкиНезаполненного;
	КонецЕсли;
	
	Если Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ИмяПереключениеОтметкиНезаполненного.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	ОбновитьИмяДляВхода(Форма);
	
	// Настройка доступности связанных элементов.
	//Элементы.ВходВПрограммуРазрешен.Доступность    = Не Объект.Недействителен;
	//Элементы.ОсновныеСвойства.Доступность          = Не Объект.Недействителен;
	//Элементы.ГруппаИзменитьОграничение.Доступность = Не Объект.Недействителен
	//                                               И Не Элементы.Наименование.ТолькоПросмотр;
	
	Элементы.ПараметрыАутентификации1СПредприятия.Доступность = Форма.ПользовательИБАутентификацияСтандартная;
	Элементы.ПользовательИБПользовательОС.Доступность         = Форма.ПользовательИБАутентификацияОС;
	
	// Уточнение настроек в модели сервиса.
	//Если ДействияСПользователемСервиса <> Неопределено Тогда
	//	
	//	// Доступность редактирования КИ.
	//	Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииEmailПользователя());
	//	НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	//	Если НайденныеСтроки <> Неопределено Тогда
	//		ЗаполненEMail = ЗначениеЗаполнено(Форма[НайденныеСтроки[0].ИмяРеквизита]);
	//	Иначе
	//		ЗаполненEMail = Ложь;
	//	КонецЕсли;
	//	
	//	Если Объект.Ссылка.Пустая() И ЗаполненEMail Тогда
	//		МожноИзменятьПароль = Ложь;
	//	Иначе
	//		МожноИзменятьПароль = ДействияСПользователемСервиса.ИзменениеПароля;
	//	КонецЕсли;
	//	
	//	Элементы.СменитьПароль.Доступность = Элементы.СменитьПароль.Доступность И МожноИзменятьПароль;
	//	
	//	Элементы.ПользовательИБИмя1.ТолькоПросмотр = Элементы.ПользовательИБИмя1.ТолькоПросмотр
	//		ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
	//	
	//	Элементы.ПользовательИБИмя2.ТолькоПросмотр = Элементы.ПользовательИБИмя2.ТолькоПросмотр
	//		ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
	//	
	//	Элементы.Наименование.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр 
	//		ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеПолногоИмени;
	//	
	//	Элементы.ВходВПрограммуРазрешен.Доступность = Элементы.ВходВПрограммуРазрешен.Доступность
	//		И ДействияСПользователемСервиса.ИзменениеДоступа;
	//	
	//	Элементы.Недействителен.Доступность = Элементы.Недействителен.Доступность
	//		И ДействияСПользователемСервиса.ИзменениеДоступа;
	//	
	//	Форма.ЗапретИзмененияАдминистративногоДоступа =
	//		НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа;
	//КонецЕсли;
	
	ОбновитьОграничениеСрокаДействия(Форма);
	
КонецПроцедуры

// Для форма элементов справочников Пользователи и ВнешниеПользователи.
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОграничениеСрокаДействия(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ИзменитьОграничениеНаВходВПрограмму.Видимость =
		Элементы.СвойстваПользователяИБ.Видимость И Форма.УровеньДоступа.УправлениеСписком;
	
	Если Не Элементы.СвойстваПользователяИБ.Видимость Тогда
		Элементы.ВходВПрограммуРазрешен.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность = Форма.УровеньДоступа.НастройкиДляВхода;
	
	ЗаголовокСОграничением = "";
	
	Если Форма.СрокДействияНеОграничен Тогда
		ЗаголовокСОграничением = НСтр("ru = 'Вход в программу разрешен (без ограничения срока)'");
		
	ИначеЕсли ЗначениеЗаполнено(Форма.СрокДействия) Тогда
		ЗаголовокСОграничением = СтрШаблон(НСтр("ru = 'Вход в программу разрешен (до %1)'"),
			Формат(Форма.СрокДействия, "ДЛФ=D"));
			
	ИначеЕсли ЗначениеЗаполнено(Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
		ЗаголовокСОграничением = СтрШаблон(
			НСтр("ru = 'Вход в программу разрешен (запретить, если не работает более %1)'"),
			Формат(Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода, "ЧГ=") + " "
				+ "дн.");//ПредметЦелогоЧисла(Форма.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода,
					//"", НСтр("ru = 'день,дня,дней,,,,,,0'"))
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаголовокСОграничением) Тогда
		Элементы.ВходВПрограммуРазрешен.Заголовок = ЗаголовокСОграничением;
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Заголовок = НСтр("ru = 'Изменить ограничение'");
	Иначе
		Элементы.ВходВПрограммуРазрешен.Заголовок = "";
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Заголовок = НСтр("ru = 'Установить ограничение'");
	КонецЕсли;
	
КонецПроцедуры

//&НаСервере
//Функция ОпределитьДоступностьЭлементовКонтактнойИнформации()
//	
//	Результат = Новый Соответствие;
//	Для Каждого СтрокаКонтактнойИнформации Из ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
//		ДействияВидаКонтактнойИнформации = ДействияСПользователемСервиса.КонтактнаяИнформация.Получить(СтрокаКонтактнойИнформации.Вид);
//		Если ДействияВидаКонтактнойИнформации = Неопределено Тогда
//			// Возможность редактирования этого вида КИ не регулируется менеджером сервиса.
//			Продолжить;
//		КонецЕсли;
//		ЭлементКонтактнойИнформации = Элементы[СтрокаКонтактнойИнформации.ИмяРеквизита];
//		Результат.Вставить(СтрокаКонтактнойИнформации.Вид,
//			Не ЭлементКонтактнойИнформации.ТолькоПросмотр
//			И ДействияВидаКонтактнойИнформации.Изменение);
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

// Продолжение процедуры ИзменитьОграничениеНаВходВПрограмму.
&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Вычисляет начальное имя для входа по полному имени пользователя.
Функция ПолучитьКраткоеИмяПользователяИБ(Знач ПолноеИмя) Экспорт
	
	Разделители = Новый Массив;
	Разделители.Добавить(" ");
	Разделители.Добавить(".");
	
	КраткоеИмя = "";
	Для Счетчик = 1 По 3 Цикл
		
		Если Счетчик <> 1 Тогда
			КраткоеИмя = КраткоеИмя + ВРег(Лев(ПолноеИмя, 1));
		КонецЕсли;
		
		ПозицияРазделителя = 0;
		Для каждого Разделитель Из Разделители Цикл
			ПозицияТекущегоРазделителя = СтрНайти(ПолноеИмя, Разделитель);
			Если ПозицияТекущегоРазделителя > 0
			   И (    ПозицияРазделителя = 0
			      ИЛИ ПозицияРазделителя > ПозицияТекущегоРазделителя ) Тогда
				ПозицияРазделителя = ПозицияТекущегоРазделителя;
			КонецЕсли;
		КонецЦикла;
		
		Если ПозицияРазделителя = 0 Тогда
			Если Счетчик = 1 Тогда
				КраткоеИмя = ПолноеИмя;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если Счетчик = 1 Тогда
			КраткоеИмя = Лев(ПолноеИмя, ПозицияРазделителя - 1);
		КонецЕсли;
		
		ПолноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - ПозицияРазделителя);
		Пока Разделители.Найти(Лев(ПолноеИмя, 1)) <> Неопределено Цикл
			ПолноеИмя = Сред(ПолноеИмя, 2);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КраткоеИмя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = Форма.НачальноеОписаниеПользователяИБ;
	
	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПолучитьКраткоеИмяПользователяИБ(
			Форма.Объект.Наименование);
		
		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБПоказыватьВСпискеВыбора   <> Шаблон.ПоказыватьВСпискеВыбора
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                    <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияОС          <> Шаблон.АутентификацияОС
	 ИЛИ Форма.ПользовательИБПользовательОС            <> ""
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID      <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБРежимЗапуска              <> Шаблон.РежимЗапуска
	 ИЛИ Форма.ПользовательИБЯзык                      <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()         <> 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей.

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр", ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",            ЭтотОбъект);
	ПараметрыДействия.Вставить("КоллекцияРолей",   ПользовательИБРоли);
	ПараметрыДействия.Вставить("ЗапретИзмененияАдминистративногоДоступа",
		ЗапретИзмененияАдминистративногоДоступа);
	
	ПараметрыДействия.Вставить("НазначениеРолей", "ДляАдминистраторов");
	
//	БылУстановленАдминистративныйДоступ = ПользовательИБРоли.НайтиСтроки(
//		Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
	
	ПользователиСлужебныйОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
	//ЗаполнитьРоли(ОписаниеПользователяИБ.Роли);

//	УстановленАдминистративныйДоступ = ПользовательИБРоли.НайтиСтроки(
//		Новый Структура("Роль", "ПолныеПрава")).Количество() > 0;
	
	//Если УстановленАдминистративныйДоступ <> БылУстановленАдминистративныйДоступ Тогда
	//	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	//КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
//
&НаСервере
Процедура ПользователиСлужебныйОбработатьИнтерфейсРолей(Действие, Параметры) Экспорт
	
	Если Действие = "УстановитьТолькоПросмотрРолей" Тогда
		//УстановитьТолькоПросмотрРолей(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЗагрузкеНастроек" Тогда
		//НастроитьИнтерфейсРолейПриЗагрузкеНастроек(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриСозданииФормы" Тогда
		//НастроитьИнтерфейсРолейПриСозданииФормы(Параметры);
		
	ИначеЕсли Действие = "НастроитьИнтерфейсРолейПриЧтенииНаСервере" Тогда
		//НастроитьИнтерфейсРолейПриЧтенииНаСервере(Параметры);
		
	ИначеЕсли Действие = "ТолькоВыбранныеРоли" Тогда
		ТолькоВыбранныеРоли(Параметры);
		
	ИначеЕсли Действие = "ГруппировкаПоПодсистемам" Тогда
		ГруппировкаПоПодсистемам(Параметры);
		
	ИначеЕсли Действие = "ОбновитьДеревоРолей" Тогда
		//ОбновитьДеревоРолей(Параметры);
		
	ИначеЕсли Действие = "ОбновитьСоставРолей" Тогда
		ОбновитьСоставРолей(Параметры);
		
	ИначеЕсли Действие = "ЗаполнитьРоли" Тогда
		ЗаполнитьРоли(Параметры);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Ошибка в процедуре ПользователиСлужебный.ОбработатьИнтерфейсРолей()
			           |Неверное значение параметра Действие: ""%1"".'"),
			Действие);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВыбранныеРоли(Параметры)
	
	Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка =
		НЕ Параметры.Форма.Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ГруппировкаПоПодсистемам(Параметры)
	
	Параметры.Форма.ПоказатьПодсистемыРолей = НЕ Параметры.Форма.ПоказатьПодсистемыРолей;
	Параметры.Форма.Элементы.РолиПоказатьПодсистемыРолей.Пометка = Параметры.Форма.ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей(Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
	
КонецПроцедуры



//#КонецОбласти
